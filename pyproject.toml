[project]
name = "mcp-feedback-enhanced"
version = "2.6.0"
description = "Enhanced MCP server for interactive user feedback and command execution in AI-assisted development, featuring dual interface support (Web UI and Desktop Application) with intelligent environment detection and cross-platform compatibility."
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "Minidoracat", email = "minidora0702@gmail.com" }
]
keywords = ["mcp", "ai", "feedback", "web-ui", "desktop-app", "interactive", "development", "cross-platform", "tauri", "dual-interface"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: Desktop Environment",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Operating System :: OS Independent",
    "Environment :: Web Environment",
    "Environment :: X11 Applications",
    "Environment :: Win32 (MS Windows)",
    "Environment :: MacOS X",
]
dependencies = [
    "fastmcp>=2.0.0",
    "psutil>=7.0.0",
    "fastapi>=0.115.0",
    "uvicorn>=0.30.0",
    "jinja2>=3.1.0",
    "websockets>=13.0.0",
    "aiohttp>=3.8.0",
    "mcp>=1.9.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
]

[project.urls]
Homepage = "https://github.com/Minidoracat/mcp-feedback-enhanced"
Repository = "https://github.com/Minidoracat/mcp-feedback-enhanced"
Issues = "https://github.com/Minidoracat/mcp-feedback-enhanced/issues"

[project.scripts]
mcp-feedback-enhanced = "mcp_feedback_enhanced.__main__:main"
interactive-feedback-mcp = "mcp_feedback_enhanced.__main__:main"

[build-system]
requires = [
    "hatchling",
    "maturin>=1.8.7",
    "setuptools-rust>=1.11.1"
]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_feedback_enhanced"]

# 桌面应用程序二进制文件现在直接存储在 Git 中
# 由 build-desktop.yml 工作流程自動構建並提交

[tool.uv]
dev-dependencies = [
    "bump2version>=1.0.1",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-timeout>=2.1.0",
    "twine>=6.1.0",
    "ruff>=0.11.0",
    "mypy>=1.16.0",
    "pre-commit>=4.0.0",
    "maturin>=1.8.7",
    "setuptools-rust>=1.11.1",
    "pillow>=11.2.1",
]

# ===== Ruff 配置 =====
[tool.ruff]
# 目标 Python 版本
target-version = "py311"

# 程序代码行长度
line-length = 88

# 包含的文件模式
include = ["*.py", "*.pyi", "**/pyproject.toml"]

# 排除的文件和目录
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",

    "venv",
    "*.egg-info",
    ".trunk",
]

[tool.ruff.lint]
# 啟用的規則集
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "C90",    # mccabe
    "T20",    # flake8-print
    "TID",    # flake8-tidy-imports
    "ICN",    # flake8-import-conventions
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "S",      # bandit (安全檢查)
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "PL",     # Pylint
    "RUF",    # Ruff-specific rules
]

# 忽略的规则 - 2024-12-19 更新：经过三阶段程序代码品质改善
ignore = [
    # === 格式化和工具冲突 ===
    "E501",   # 行长度由 formatter 处理
    "COM812",  # 避免与 formatter 冲突
    "COM819",  # 避免与 formatter 冲突

    # === 测试和调试 ===
    "S101",   # 允许使用 assert（测试中必要）
    "T201",    # 允许 print 语句（调试和脚本中使用）

    # === 安全相关（已针对性处理）===
    "S603",   # 允许 subprocess 调用（已安全处理，仅限必要场景）
    "S607",   # 允许部分路径执行（已安全处理，仅限必要场景）
    "S108",    # 允许临时文件路径（resource_manager 中安全使用）

    # === 中文项目特殊需求 ===
    "RUF001",  # 允许全角字符（中文项目必要）
    "RUF002",  # 允许全角字符（中文项目必要）
    "RUF003",  # 允许全角字符（中文项目必要）

    # === 复杂度控制（合理范围内）===
    "PLR0913", # 允许多参数函数（API 设计需要）
    "PLR0912", # 允许多分支（状态机等复杂逻辑）
    "PLR0911", # 允许多返回语句（早期返回模式）
    "PLR0915", # 允许函数语句过多（复杂业务逻辑）
    "PLR2004", # 允许魔术数字（配置值等）
    "C901",    # 允许复杂函数（核心业务逻辑）

    # === 待重构项目（下个版本处理）===
    "E402",    # 模块级导入不在顶部（1个错误，需要重构导入顺序）
    "E722",    # 裸露 except（18个错误，需要指定异常类型）
    "ARG001",  # 未使用函数参数（4个错误，需要重构接口）
    "ARG002",  # 未使用方法参数（4个错误，需要重构接口）
    "SIM105",  # try-except-pass（6个错误，可用 contextlib.suppress）
    "RUF006",  # 未存储 asyncio.create_task 返回值（3个错误）

    # === 架构设计相关（长期保留）===
    "TID252",  # 相对导入（模块架构设计）
    "B007",    # 未使用循环变量（某些算法中正常）
    "SIM102",  # 嵌套 if（可读性优于简洁性）
    "SIM103",  # 复杂条件（业务逻辑清晰性）
    "SIM108",  # if-else vs 三元运算符（可读性选择）
    "SIM110",  # for 循环 vs any()（性能和可读性平衡）
    "SIM117",  # 嵌套 with（资源管理模式）
    "RET504",  # 不必要赋值（调试和可读性）
    "RUF005",  # 列表连接（性能不敏感场景）
    "RUF012",  # 可变类别属性（设计模式需要）
    "RUF013",  # 隐式 Optional（渐进式类型注解）
    "S110",    # try-except-pass（错误恢复模式）
    "E712",    # 布尔比较（明确性优于简洁性）
    "PLW0603", # global 语句（单例模式等）
    "A002",    # 遮蔽内建函数名称（领域特定命名）
]

# 每个文件的最大复杂度
mccabe.max-complexity = 10

[tool.ruff.lint.per-file-ignores]
# 测试文件的特殊规则
"tests/**/*.py" = [
    "S101",    # 测试中允许 assert
    "ARG",     # 测试中允许未使用参数
    "FBT",     # 测试中允许布尔参数
    "PLR2004", # 测试中允许魔术数字
    "S311",    # 测试中允许伪随机生成器
]

# __init__.py 文件的特殊规则
"__init__.py" = [
    "F401",    # 允许未使用的导入
]

# 脚本文件的特殊规则
"scripts/**/*.py" = [
    "T201",    # 脚本中允许 print
    "S602",    # 脚本中允许 shell 调用（脚本环境相对安全）
    "S603",    # 脚本中允许 subprocess 调用
    "S607",    # 脚本中允许部分路径执行
]

# Web 模块的特殊规则（需要更严格的安全检查）
"src/mcp_feedback_enhanced/web/**/*.py" = [
    "S104",    # 允许绑定 127.0.0.1（本地开发安全）
]

[tool.ruff.format]
# 使用雙引號
quote-style = "double"

# 縮排樣式
indent-style = "space"

# 跳過魔術逗號
skip-magic-trailing-comma = false

# 行結尾
line-ending = "auto"

[tool.ruff.lint.isort]
# import 排序配置
known-first-party = ["mcp_feedback_enhanced"]
force-single-line = false
lines-after-imports = 2

# ===== mypy 配置 =====
[tool.mypy]
# Python 版本
python_version = "3.11"

# 基本設定 - 2024-12-19 更新：經過三階段改善，74% 錯誤已修復
warn_return_any = true
warn_unused_configs = true
# 漸進式啟用：核心模組已達到類型安全標準，剩餘26個錯誤主要為第三方庫問題
disallow_untyped_defs = false  # 目标：下个版本启用
disallow_incomplete_defs = false  # 目标：下个版本启用
check_untyped_defs = true
disallow_untyped_decorators = false  # 漸進式啟用

# 严格模式（渐进式启用）
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# 错误格式
show_error_codes = true
show_column_numbers = true
pretty = true

# 包含和排除 - 使用最佳实践配置
files = ["src", "tests"]
exclude = [
    "build/",
    "dist/",
    ".venv/",
    "venv/",
    ".trunk/",

    ".mypy_cache/",
]

# 最佳实践：明确指定包基础路径
explicit_package_bases = true
# 设置 mypy 路径，确保正确的模块解析
mypy_path = ["src"]
# 忽略已安装的包，只检查源代码
no_site_packages = true

# 第三方庫配置
[[tool.mypy.overrides]]
module = [
    "fastmcp.*",
    "mcp.*",
    "psutil.*",
    "uvicorn.*",
    "websockets.*",
    "aiohttp.*",
    "fastapi.*",
    "pydantic.*",
    "pytest.*",
]
ignore_missing_imports = true

# 测试文件的宽松配置
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
